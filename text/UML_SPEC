= UML Mapping Spec
UML is markup used to translate keyboard-available characters into Unicode. In no way is it intended as comprehensive. But it may help make some typography available.

== Generalities
If any match fails, the input symbols should be printed to output as they lie in the input.

UML depends on typographical input. Some of the character sequences are bound to create unexpected conversions if the text is in some way complex.


== I/O format
Input is text. The form of input and output; stream, file, etc. is not defined.

=== Unicode
UML input would usually be Latin/ASCII/UTF-8. UML should, if writing to solid format, encode and output as Unicode.

In circumstances where the codebase can not handle Unicode, UML can output Latin/ASCII with escapes. For example, some implementations of UML may translate to XML entity coding. If XML entity encodings are implemented, please implement decimal entities first.

Unicode codepoints, in whatever format, are preferred. If translation is to entity, then this should be clearly indicated (e.g. in method or class names)

~ Rationale
: XML entity encoding may be widespread in use, but is still a subset of potential usage. Moreover, entity-encoded material is difficult to scan, so has little further use. Unicode encoding may not be implemented in many older codebases, but is now widely used. In particular, TML is likely to be used for material destined for the web---most browsers handle Unicode in several encodings. Moreover, UTF-8 degrades respectfully in older software.

~ Rationale
: HTML character entity references exist, but are unlikely to be as compatible as XML Unicode entities, which usage stretches far beyond browsers. Hexadecimal numeric character references are used in official documentation, but rarely in practice. Greater compatibility, and most current sources, recommend decimal-encoded entities.


== Parsing generalities
Each group in the character references should be available as a separate call. 
Combination groups may be implemented also.

Subgroups are detailed for purpose of information.


== Character sequences
A pseudo-PEG grammar shows the required match and format (...for complex matches). The format is designed to be readable---efficient implementations will be optimised.


=== basic
Legal marks, hyphens, dashes and ellipse.

==== Legal marks

?codeblock
"(c)" = copyright
"(t)" = trademark
"(r)" = registered
?

The copyright, trademark, and registered legal marks.

==== Ellipsis
"..." = ellipsis


==== Hyphen/Dashes

?codeblock
"---" = em
"--" = en
"-" = hyphen
"-." = dictionary hyphen
"-" = hyphen
?

~ Rationale
: The hyphen is a particularly difficult character. The keyboard character is the multi-purpose, and well-named, ''hyphen-minus'. The ''hyphen-minus' is wrong for hyphen usage. Conversion to a true hyphen encounters two difficulties...

First, the detection of the ''-' char is UML-ambiguous, a simple hyphen clashes with the marks for the mathematical minus mark '':m-'. However, UML specifies that the tighter definitions of ''math' are run before ''typography', so all is ok.

Second, it would be foolish to ignore that much TML code will be embedded with mathematical notation or computer code---which a hyphen conversion will damage. However, TML encourages explicit filtering for markup protection so, again, UML is free to make a simple conversion. 

~ Rationale
: Hyphens and dashes should not be surrounded by space. Well, dashes may be surrounded by hair-space. However, it is not the business of UML to detect, nor dictate, the presence of space.


=== Typography
Should include ''basic' methods in the previous section, and the following,

==== Quotes

?codeblock
"''"  single quotes open
"'" single quote close and apostrophe
"\"\""  double quote open 
"\"" double quote close
"<<" guillemot open
">>" guillemot close
?

~ Rationale
: UML has an unusual quote system. However, TML convention suggests an open mark should be distinguished from a close mark, and that characters should, where possible, be repeated.

This system allows (as do some other systems) single quote close to be an apostrophe (Unicode approved usage).

~ Rationale
: The UML setup denies the user the ability to use the straight apostrophe for foot and inch marks. However, Unicode has separate characters for these---the keyboard mappings are wrong anyway (maybe sometime provide a solution?). 


==== Combining marks

?codeblock
":" ~ oneOf(
| "c" CEDILLA
| ":" DIAERESIS
| "u" BREVE
| "^" CIRCUMFLEX
| "v" CARRON
| "o" RING
| "\" GRAVE ACCENT
| "/" ACUTE ACCENT
) ~ LETTER
?

The tables may match a character first. If character matching is attempted, they should first implement ''Latin-1 Supplement' Letters, meaning vowels (vowels includes ''y') for accents, not including BREVE and CARRON (i.e. BREVE and CARRON can be implemented, but also omitted).

If character tables fail, the code should fall back to using Unicode combining characters. Combing character results should include all of the marks in the table above, including BREVE and CARRON.

Java advice: ""never build your own tables".


=== Math
Fractions, math symbols (inc. mathematical multiply/minus, and degree).

==== Math symbols
?codeblock
":mx" multiply
":m-" minus
":mo" degree
?

~ Rationale
: Degree also has use as the unit of temperature. However, use for temperature can still be regarded as ''math', and spares symbols for other uses.

~ Rationale
: Multiply also has use for volume dimensions. It can still be regarded as ''math'.


==== Fractions
?codeblock
": ~ anyOf(1235678) ~ anyOf(234568)
?

All non-reducible fractions with factorial 2,3,4,5,7,8. Non-reducible means 3/4 exists, but not 2/4 (reduces to 1/2).

~ Rationale
: Fraction marks are unintuitive (i.e. matches no common system, and also visually difficult to read). But the prefix '':' is easy to parse (compare to the common [cb DIGIT ~ / ~ DIGIT] representation). The lack of slashes means the notation is less likely to interfere with literals containing computer and mathematical code. And the character '':' is consistent with other marks in UML. 


== Notes
=== ligatures
Unicode regards ligatures as a feature of presentation. They have an effect on semantic parsing, so Unicode discourages their use. Consequently, they are not enabled.

=== Math before typography
If used together, ''math' should be parsed before ''typography'. The ''math' definition of ''minus' is unlikely to be ambiguous, but the typographical hyphen will replace it if typography is used first.   
