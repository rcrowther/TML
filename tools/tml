#!/usr/bin/env bash
#
##############################################################################
# Copyright 2014-2015 rcrowther
#
# This is free software; see the distribution for copying conditions.
# There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
##############################################################################

# What does the script do?
# - It allows us to gather some info from the environment, such as
# where the script is, which is where the .jar executable is, which is
# unreliable to find from Java.
# - It allows us to give a cool name to the command, whatever
# versioning junk is used to name the executable.
#
# This was majorly lifted from the Scala launch/run script.
# I know nothing of this stuff. R.C.
#


## Java
# The script tries the options below.
# If they are not found, it checks if "java" is installed on the system.

## Enable to point at a different JDK/JRE Java installation.
# (to be found in the subfolder /bin/java)
# Note also that EXECUTABLE has more options if you use an JDK, rather than a JRE.
JAVA_HOME=""

# If your Java executable is not in the usual /bin position override
# here. This should be the address of the executable itself.
##JAVACMD=""


## Scala
# The script tries the options below. If no folders are found, the
# script exits.
# (EXECUTABLE must find at this address not only executable scripts, but a
# full set of Scala jars)

## Enable to point at a different Scala installation
# (Scala to be found in the subfolder /lib)
SCALA_HOME=""

# EXECUTABLE can not function if SCALALIB is modified. It *must* point at a
# distribution with /lib jars.


## Executable
# Name of the executable
EXECUTABLE_JAR="tml.jar"

# The script will first try a local library (correct for a normal
# installation) then look through the options below. If no
# jar is found, the script exits.
# (for development, remove the jar from the library, then point EXECUTABLELIB
# at the development area)

## Enable to point at a different EXECUTABLE installation
# (to be found in the subfolder /lib)
##EXECUTABLE_HOME=""

## If your EXECUTABLE jar is not in the usual /lib position override
# here. This should be the address of an executable jar.
##EXECUTABLELIB=""



## The class to execute in Scala code
EXECUTABLE_CLASS="tml.Runner"




## Functions
#

# Returns the location of the folder containing this script
# (usually this returns the pwd, which will be the directory
# above the /bin - the /bin being the PATH invoked)
findScriptHome () {
    # see SI-2092 and SI-5792
    local source="${BASH_SOURCE[0]}"
    # while symlink...
    while [ -h "$source" ] ; do
	local linked="$(readlink "$source")"
	local dir="$( cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd )"
	source="$dir/$(basename "$linked")"
    done
    ( cd -P "$(dirname "$source")/.." && pwd )
}




## big deal of debug
# Not sure what the right default is here: trying nonzero.
scala_exit_status=127
saved_stty=""

# restore stty settings (echo in particular)
function restoreSttySettings() {
    if [[ -n $SCALA_RUNNER_DEBUG ]]; then
	echo "restoring stty:"
	echo "$saved_stty"
    fi
    
    stty $saved_stty
    saved_stty=""
}

function onExit() {
    [[ "$saved_stty" != "" ]] && restoreSttySettings
    exit $scala_exit_status
}

# to reenable echo if we are interrupted before completing.
trap onExit INT

# save terminal settings
saved_stty=$(stty -g 2>/dev/null)

# clear on error so we don't later try to restore them
if [[ ! $? ]]; then  
    saved_stty=""
fi
if [[ -n $SCALA_RUNNER_DEBUG ]]; then
    echo "saved stty:"
    echo "$saved_stty"
fi



## Script start
##

# Find the containing folder for this script
# (the folder surrounding /bin)
SCRIPT_HOME="$(findScriptHome)"


scala $SCRIPT_HOME/lib/$EXECUTABLE_JAR "$@"

# record the exit status lest it be overwritten:
# then reenable echo and propagate the code.
scala_exit_status=$?
onExit
