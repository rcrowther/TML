== Parser
val p = tml.HTML()

== whitespace
tml.HTML("")
tml.HTML(" ")
tml.HTML("  ")
tml.HTML("\n")
tml.HTML("\n\n")

== whitespace text
tml.HTML("x")
tml.HTML("duff ")
tml.HTML("duff")
tml.HTML(" duff")


== block control
 tml.HTML("## oops\n a daisy\n#\n")
 tml.HTML("## oops\n a daisy\n#")
 tml.HTML("## oops\n a daisy\n#")
 tml.HTML("##.klass oops\n a daisy\n\n#")
 tml.HTML("#tag.klass oops\n a daisy\n#")
  tml.HTML("##.klass       oops\n a daisy\n#")
 
 
 tml.HTML(" #tag.klass oops\n a daisy\n#")
 tml.HTML(" #tag.klass oops\n a daisy\n#\n")

== block control alternate
 tml.HTML("#neato.hots oops\n a daisy\n\n#")
 tml.HTML("\n\n++ oops\n a daisy\n\n+")
 tml.HTML("\n\n+ol.success oops\n a daisy\n\n+")
 tml.HTML("\n\n++.success \n\n-- oops\n\n-\n\n-- a daisy\n\n-\n\n+")
tml.HTML("#bq truth, covered in security \n#")



== Attribute warning
tml.HTML("#thing{dot.com\n oops")
tml.HTML("#thing[frankly... \n oops")


== Block literal
tml.HTML("??.lost loner\n?\nsee him")
tml.HTML("??   \nloner\n?")
tml.HTML("?? loner\n")

== paragraph control
tml.HTML("~ loner\nsee him")
tml.HTML("== well\n~ well\n: well")

== paragraph control alternate
tml.HTML("~ loner\nstanding in the line of the cars")
tml.HTML(": standing in the line of the cars\n")
tml.HTML("~ loner\n: standing in the line of the cars")

tml.HTML("@ loner\nsee him")



== paragraph control count
tml.HTML("=h3.tracks loner\nsee him")
tml.HTML("= loner\nsee him")
tml.HTML("== loner\nsee him")
tml.HTML("==yp.tracks loner\nsee him")
tml.HTML("===.tracks loner\nsee him")

tml.HTML("===== loner\n\nsee him")

== Selfclosing paragraph
tml.HTML("\n_.dashed ")
tml.HTML("_ ")


== Parser
val p = tml.HTML()




== Inline
tml.HTML("bell [stress ] cup")
tml.HTML("bell [stress not] cup")
tml.HTML("bell [stress.klass not] cup")
tml.HTML("bell [ not] cup")
tml.HTML("bell [italic not] cup")

tml.HTML("bell[stress not]cup")
tml.HTML("bell [stress       not] cup")
tml.HTML("bell [stress not      ] cup")


== Inline closure warning
tml.HTML("bell [stress not\n cup")
tml.HTML("bell [? not\n cup")

== inline mark
tml.HTML("bell*img.small[a bell]{church.com} cup")
tml.HTML("bell  *img.small    cup")

tml.HTML("bell\n*img.small cup")



== Inline literal
tml.HTML("bell [?   not\\*#|[clusp   ] cup")

tml.HTML("?? play\n?")
tml.HTML("??\nplay\n?")

tml.HTML("""
??
To be
  ...or not to be?
That
    [That!]
  is the question.
?
""")
tml.HTML("\n?? \nTo be\n  ...or not to be?\nThat\n    [That!]\n  is the question.\n?")

== Parser
val p = tml.HTML()


== HTML
// main.section etc.
tml.HTML("#main content\n\n#")
// headline
tml.HTML("=== Some charms\nNot this for sure. But that?")
tml.HTML("=== Some charms\n[a{coffee.fr} Not this] for now. So what?")
// image (inline)
tml.HTML("the dolphin,\n\n*.small{image of dolphin}{dolphin.mars.ok}\ndolphins are...")
// horizontal rule? Block level?...
tml.HTML("_.dashed")
// Span block
tml.HTML("Some special [ £2.99] text")
tml.HTML("Some special £[i 2.99] text")

// links block
tml.HTML("through to\n\n#a.external{go now!}{otherwhere.com} the other side\n\n#")
// links (inline)
tml.HTML("through to [a.external[go now!]{otherwhere.com} the other side]")
// pre
tml.HTML("?? To be,\n   Or not to be\nWhat now?\n?")

// code
tml.HTML("#pre\n?code       var prevChar = currentChar\n       var closing = false\n     forward(until)\n?\n#")

== Errors
tml.HTML("#thing{abrup...")
tml.HTML("#thing[ig]:nope")
tml.HTML("#\n oops")
 tml.HTML("## oops> \n-")
tml.HTML("bell]cup")
tml.HTML("?? bell\ncup")
tml.HTML("\ntricky\n[? bell\ncup")
tml.HTML("\n##  \n far")


== Renderer Errors
tml.HTML.errorReport(" *{title}{alternative text}{go-no-place.com}  ")
tml.HTML.errorReport(" [a{title}{alternative text}{go-no-place.com}  ]")

============================
tml.HTML("")
tml.HTML("bell")
tml.HTML("bell cup")
tml.HTML("bell    cup")
tml.HTML("bell cup   ")
tml.HTML("   bell cup")
tml.HTML("   bell\n \n cup")



== processLine
tml.HTML("")
tml.HTML("bell")
tml.HTML("bell cup")
tml.HTML("bell    cup")
tml.HTML("bell cup   ")
tml.HTML("   bell cup")
tml.HTML("bell[cup")


== Newlines
tml.HTML("  \n")
tml.HTML("  s\n")
tml.HTML("  s\nq")
tml.HTML("s\nq")
     
   
  
== Parser
val p = tml.HTML()
  val p = Parser2()
  
== Lines
tml.HTML("\n1\n2\n3\n4")
 


tml.HTML("""
== TML in short
++
-- TML does not try to be comprehensive for any particular output. 
It provides basic text structuring and a few ways to insert stand-alone markup tags.
-
-- TML makes no attempt to be discrete or hidden.
-
-- TML is inflexible
It can not be customised except by re-writing the parser.
-
-- TML does not try to copy other lightweight markups. 
Some markups do this, to help a user remember how to use them. After all, markup is
is a job most users will only do now and then.
However, TML does sometimes inherit a few marks that look similar to other notations.
-
-- TML has a consistent and low-weight syntax.
-
+
""")
